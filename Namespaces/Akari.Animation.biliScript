// {{Depend : Akari}} //
// {{Depend : Akari.Utilities}} //

/* Namespace: Akari.Animation
 * This sort of classes are helpers for creating animation.
 */

Akari.Animation = {};
 
/* Static Class: Interpolation
 * Provides functions for interpolating between numbers.
 *
 * Common parameters for functions in this class:
 *
 * t
 *   A Number, time factor indicating position between the values.
 * value1
 *   A Number, the first value ( t = 0 ).
 * value2
 *   A Number, the second value ( t = 1 ).
 */
Akari.Animation.Interpolation =
{
  /* Function: dimension
   * Creates a multidimensional interpolation based on given function.
   *
   * interpolation
   *   The interpolation function to wrap.
   */
  dimension : function( interpolation )
  {
    return function( t, value1, value2 )
    {
      var result = [];
      
      for ( var i = 0; i < value1.length; i ++ )
      {
        result[ i ] = interpolation( t, value1[ i ], value2[ i ] );
      }
      
      return result;
    };
  },

  /* Function: bezier
   * [expensive] Creates a bezier interpolation.
   * The resulting interpolation transforms the input t with the given control points, and treats the resulting t as a linear time factor.
   *
   * cpS, cpD
   *   Array of numbers. Coordinates on the source-t / destination-t axis.
   */
  bezier : function( cpS, cpD )
  {
    if ( cpS.length != cpD.length || cpS.length < 1 )
    {
      return Akari.Animation.Interpolation.linear;
    }

    // Only 0 < cpS < 1 are valid as a function of time
    for ( var i = cpS.length - 1; i >= 0; i -- ) {
      if ( cpS[ i ] < 0 || cpS[ i ] > 1 )
      {
        return Akari.Animation.Interpolation.linear;
      }
    }

    if ( cpS.length > 2 )
    {
      // higher order curves
      var calcBezier = function( t, cp )
      {
        var a = [];
        a[ 0 ] = cp;

        for ( var jr = 1; jr < cp.length; jr ++ )
        {
          a[ jr ] = [];
          for ( var ir = 0; ir < cp.length - jr; ir ++ )
          {
            a[ jr ][ ir ] = ( 1 - t ) * a[ jr - 1 ][ ir ] + t * a[ jr - 1 ][ ir + 1 ];
          }
        }

        return a[ cp.length - 1 ][ 0 ];
      };

      var calcSlope = null;

      var newtonIterations = 2;
      var binaryIterations = 7;
      var sampleSize = 17;
    }
    else ( cpS.length == 1 )
    {
      var calcBezier = function( t, cp )
      {
        var c1 = cp[ 1 ];
        var c2 = cp[ 2 ];
        return ( ( ( 1 - 3 * c2 + 3 * c1 ) * t + 3 * c2 - 6 * c1 ) * t + 3 * c1) * t;
      };

      var calcSlope = function( t, cp )
      {
        var c1 = cp[ 1 ];
        var c2 = cp[ 2 ];
        return 3 * c1 + t * ( 6 * c2 - 12 * c1 + t * ( 3 - 9 * ( c2 - c1 ) ) );
      };

      var newtonIterations = 2;
      var binaryIterations = 5;
      var sampleSize = 11;
    }
    else
    {
      var calcBezier = function( t, cp )
      {
        var c1 = cp[ 1 ];
        return ( ( t - 3 * c1 ) * t + 3 * c1) * t;
      };

      var calcSlope = function( t, cp )
      {
        var c1 = cp[ 1 ];
        return 3 * c1 + t * ( 3 * t - 6 * c1 );
      };

      var newtonIterations = 1;
      var binaryIterations = 3;
      var sampleSize = 3;
    }

    // Samples for initial guess
    var sampleS = [];
    var sampleStep = 1 / ( sampleSize - 1 );
    var allPointS = Akari.Utilities.Factory.collapse( [ 0, cpS, 1 ] );
    var allPointD = Akari.Utilities.Factory.collapse( [ 0, cpD, 1 ] );
    for ( var i = 0; i < sampleSize; i ++ )
    {
      sampleS[ i ] = calcBezier( i * sampleStep, allPointS );
    }

    var getInitialGuess = function( tS )
    {
      for ( var i = sampleS.length - 1; i >= 0; i -- )
      {
        // sampleS[ i ] just won't work. Don't know why, the player is so quirky
        var s = i;
        var s2 = i - 1;
        if ( i === 0 || sampleS[ s2 ] <= tS )
        {
          return [ i - 1, ( i - 1 + ( tS - sampleS[ s2 ] ) / ( sampleS[ s ] - sampleS[ s2 ] ) ) * sampleStep ];
        }
      }
      return [ 0, 0 ];
    };

    // Algorithm from Firefox's implementation of cubic-bezier
    var newton = function( tS, guessTI )
    {
      for ( var i = 0; i < newtonIterations; i ++ )
      {
        var currentX = calcBezier( guessTI, allPointS ) - tS;
        var currentSlope = calcSlope( guessTI, allPointS );

        if ( Math.abs( currentSlope ) <= 0.00001 )
        {
          return guessTI;
        }

        guessTI -= currentX / currentSlope;
      }

      return guessTI;
    };

    var binary = function( tS, start, end )
    {
      var currentX;
      var currentT;
      var i = 0;

      do
      {
        currentT = start + ( end - start ) / 2;
        currentX = calcBezier( currentT, allPointS ) - tS;

        if ( currentX > 0 )
        {
          end = currentT;
        }
        else
        {
          start = currentT;
        }
      } while ( Math.abs( currentX ) > 0.001 && ( ++ i ) < binaryIterations );

      return currentT;
    };

    if ( calcSlope )
    {
      var getTI = function( t )
      {
        var ig = getInitialGuess( t );
        var startPos = ig[ 0 ] * sampleStep;
        var guessTI = ig[ 1 ];

        var initialSlope = calcSlope( guessTI, allPointS );

        if ( initialSlope > 0.02 )
        {
          return newton( t, guessTI );
        }
        else if ( initialSlope == 0.0 )
        {
          return guessTI;
        }
        else 
        {
          return binary( t, startPos, startPos + sampleStep );
        }
      };
    }
    else
    {
      var getTI = function( t )
      {
        var ig = getInitialGuess( t );
        var startPos = ig[ 0 ] * sampleStep;

        return binary( t, startPos, startPos + sampleStep );
      };
    }

    return function( t, value1, value2 )
    {
      var tI = getTI( t );
      var tD = calcBezier( tI, allPointD );

      return value1 + ( value2 - value1 ) * tD;
    };
  },
  
  /* Function: hold
   * Holds value1
   */
  hold : function( t, value1, value2 )
  {
    return value1;
  },
  
  /* Function: linear
   * Interpolates in linear manner.
   */
  linear : function( t, value1, value2 )
  {
    return value1 + ( value2 - value1 ) * t;
  },
  
  /* Function Group: cubic
   * Interpolates in cubic manner.
   */
  cubic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.cubic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.cubic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.cubic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.cubic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.cubic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: quartic
   * Interpolates in quartic manner.
   */
  quartic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.quartic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quartic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quartic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quartic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quartic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: quintic
   * Interpolates in quintic manner.
   */
  quintic :
  {
    easeIn : function( t, value1, value2 )
    {
      return value1 + ( value2 - value1 ) * t * t * t * t * t;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.quintic.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quintic.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quintic.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.quintic.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.quintic.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: exponential
   * Interpolates in exponential manner.
   */
  exponential :
  {
    easeIn : function( t, value1, value2 )
    {
      return ( t === 0 ) ? value1 : value1 + ( value2 - value1 ) * Math.pow( 2, 10 * ( t - 1 ) );
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.exponential.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.exponential.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.exponential.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.exponential.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.exponential.easeIn( t * 2 - 1, midPoint, value2 );
    }
  },
  
  /* Function Group: back
   * Interpolates in a overflowing manner.
   *
   * s
   *   [default] 1.70158
   *   Back factor.
   */
  back :
  {
    s : 1.70158,
    easeIn : function( t, value1, value2 )
    {
      return ( value2 - value1 ) * t * t * (( Akari.Animation.Interpolation.back.s + 1 ) * t - Akari.Animation.Interpolation.back.s ) + value1;
    },
    easeOut : function( t, value1, value2 )
    {
      return Akari.Animation.Interpolation.back.easeIn( 1 - t, value2, value1 );
    },
    easeInOut : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.back.easeIn( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.back.easeOut( t * 2 - 1, midPoint, value2 );
    },
    easeOutIn : function( t, value1, value2 )
    {
      var midPoint = ( value1 + value2 ) / 2;
      if ( t < 0.5 ) return Akari.Animation.Interpolation.back.easeOut( t * 2, value1, midPoint );
      return Akari.Animation.Interpolation.back.easeIn( t * 2 - 1, midPoint, value2 );
    }
  }
};

/* Enum: KeyframeMode
 * Modes of keyframe behaviors.
 */
Akari.Animation.KeyframeMode =
{
  // affectNext: The keyframe's function will be used when time is between this keyframe and the next.
  affectNext : 0,
  
  // weightBlend: The keyframe's function and the next's will be used when time is between this keyframe and the next, according to weight settings and time factor.
  weightBlend : 1,
  
  // useNext: The next keyframe's function will be used when time is between this keyframe and the next.
  useNext : 2
};
 
/* Class: Keyframe
 * A class describing a keyframe.
 *
 * time
 *   Time (in milliseconds) the keyframe is at.
 * value
 *   Value of the keyframe.
 * interpolation
 *   [default] Interpolation.linear
 *   Function used to interpolate between this value and the next.
 * mode
 *   [default] KeyframeMode.affectNext
 *   Interpolation behavior of this keyframe.
 * weight
 *   [default] 1
 *   Weight when KeyframeMode.weightBlend is used.
 */
Akari.Animation.Keyframe = function( params )
{
  return
  {
    time : params.time,
    value : params.value,
    interpolation : params.interpolation || Akari.Animation.Interpolation.linear,
    mode : params.mode || Akari.Animation.KeyframeMode.affectNext,
    weight : params.weight || 1,
    
    /* Function: clone
     * Custom clone function.
     */
    clone : function()
    {
      return Keyframe( Akari.Utilities.Factory.clone( params ) );
    }
  };
};
 
/* Enum: KeyframesBindMode
 * Modes of keyframe bind behaviors.
 */
Akari.Animation.KeyframesBindMode =
{
  // hold: Hold the value of the nearest keyframe when out of range.
  hold : 0,
  
  // repeat: Repeat keyframes when out of range (last => second)
  repeat : 1,
  
  // pingPong: Ping Pong keyframes when out of range.
  pingPong : 2
};
 
/* Class: KeyframesBind
 * An animation Binding using keyframes.
 *
 * keyframes
 *   An Array containing keyframes to use, in time order.
 * mode
 *   [default] KeyframesBindMode.hold
 *   Behavior when out of range.
 */
Akari.Animation.KeyframesBind = function( params )
{
  var firstKeyframeTime = params.keyframes[ 0 ].time;
  var lastKeyframeTime = params.keyframes[ params.keyframes.length - 1 ].time;
  var duration = lastKeyframeTime - firstKeyframeTime;
  
  // Create function for out of range behavior
  var applyRangeBehavior = null;
  if ( params.mode === Akari.Animation.KeyframesBindMode.repeat )
  {
    applyRangeBehavior = function( time )
    {
      return firstKeyframeTime + ( time - firstKeyframeTime ) % ( duration );
    };
  }
  else if ( params.mode === Akari.Animation.KeyframesBindMode.pingPong )
  {
    applyRangeBehavior = function( time )
    {
      // Modulate by double the duration
      var ppTime = ( time - firstKeyframeTime ) % ( duration * 2 );
      
      if ( ppTime > duration )
      {
        return lastKeyframeTime - ppTime + duration;
      }
      else
      {
        return firstKeyframeTime + ppTime;
      }
    };
  }
  
  // Function for finding the current keyframe index
  var findCurrentIndex = function( time )
  {
    var currentIndex = 0;
    while( params.keyframes[ currentIndex + 1 ] && params.keyframes[ currentIndex + 1 ].time < time )
      currentIndex ++;
    
    return currentIndex;
  };
  
  // Return the binding function
  return function( time )
  {
    var newTime = applyRangeBehavior ? applyRangeBehavior( time ) : time;
    
    var currentIndex = findCurrentIndex( newTime );
    var currentKey = params.keyframes[ currentIndex ];
    var nextKey = params.keyframes[ currentIndex + 1 ];
    
    // Whether there is a next keyframe to interpolate to
    if ( nextKey )
    {
      var tFactor = ( newTime - currentKey.time ) / ( nextKey.time - currentKey.time );
      
      if ( currentKey.mode === Akari.Animation.KeyframeMode.affectNext )
      {
        return currentKey.interpolation( tFactor, currentKey.value, nextKey.value );
      }
      else if ( currentKey.mode === Akari.Animation.KeyframeMode.useNext )
      {
        return nextKey.interpolation( tFactor, currentKey.value, nextKey.value );
      }
      else if ( currentKey.mode === Akari.Animation.KeyframeMode.weightBlend )
      {
        var value1 = currentKey.interpolation( tFactor, currentKey.value, nextKey.value );
        var value2 = nextKey.interpolation( tFactor, currentKey.value, nextKey.value );
        
        var weight1 = currentKey.weight * ( 1 - tFactor );
        var weight2 = nextKey.weight * tFactor;
        
        return ( value1 * weight1 + value2 * weight2 ) / ( weight1 + weight2 );
      }
    }
    else
    {
      // When there is not a next keyframe for some reason, just return the current value
      return currentKey.value;
    }
  };
};

/* Class: WiggleKeyframes
 * A set of keyframes that make a wiggle effect.
 *
 * origin
 *   Number or Array of Numbers to wiggle upon.
 * numSteps
 *   Number of keyframes to generate.
 * startTime
 *   Time (in milliseconds) at which the wiggle starts.
 * stepTime
 *   Time (in milliseconds) each step will last for.
 * amount
 *   Strength of the effect.
 * interpolation
 *   [default] Interpolation.cubic.easeInOut
 *   Function used to interpolate between values.
 * returnCenter
 *   [default] false
 *   Indicated whether to return to center before every move
 */
Akari.Animation.WiggleKeyframes = function( params )
{
  // Private function for a random vector
  var vectorRandom = function( n )
  {
    var result = [];
    
    for( var i = 0; i < n; i ++ )
    {
      result[ i ] = Math.random() - 0.5;
    }
    return result;
  };
  
  // Private function for vector length
  var vectorLength = function( vector )
  {
    var sum = 0;
    
    for( var i = 0; i < vector.length; i ++ )
    {
      sum += vector[ i ] * vector[ i ];
    }
    return Math.sqrt( sum );
  };
  
  // Private function for scaling vector
  var vectorScale = function( vector, scalar )
  {
    var result = [];
    
    for( var i = 0; i < vector.length; i ++ )
    {
      result[ i ] = vector[ i ] * scalar;
    }
    return result;
  };
  
  // Private function for adding vector
  var vectorAdd = function( vector1, vector2 )
  {
    var result = [];
    
    for( var i = 0; i < vector1.length; i ++ )
    {
      result[ i ] = vector1[ i ] + vector2[ i ];
    }
    return result;
  };
  
  // Private function for randomizing with base
  var randomize = function( origin )
  {
    if ( origin.hasOwnProperty("length") )
    {
      var randVector = vectorRandom( origin.length );
      
      // Scale vector to fit amount constraint
      var scaledVector = vectorScale( randVector, params.amount / vectorLength( randVector ) );
      
      return vectorAdd( origin, scaledVector );
    }
    else
    {
      // Origin is not Array, return a simple randomization
      return origin + params.amount * ( Math.random() - 0.5 );
    }
  };
  
  if ( params.returnCenter )
  {
    var keyframes = [];
    for( var c = 0; c < params.numSteps; c ++ )
    {
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c - 1, value : params.origin, interpolation : Akari.Animation.Interpolation.hold }) );
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c, value : randomize( params.origin ), interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    }
    
    // Repeat first for consistency
    keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * ( ++ c ) - 1, value : params.origin, interpolation : Akari.Animation.Interpolation.hold }) );
    
    return keyframes;
  }
  else
  {
    var keyframes = [];
    for( var c = 0; c < params.numSteps; c ++ )
    {
      keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * c, value : randomize( params.origin ), interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    }
    
    // Repeat first for consistency
    keyframes.push( Akari.Animation.Keyframe({ time : params.startTime + params.stepTime * ( ++ c ), value : keyframes[ 0 ].value, interpolation : params.interpolation || Akari.Animation.Interpolation.cubic.easeInOut }) );
    
    return keyframes;
  }
};