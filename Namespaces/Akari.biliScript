
/* Namespace: Akari
 * Contains several namespace level functions.
 */
Akari = {};

/* Function: execute
 * Sets off the helper script running.
 *
 * mainComp
 *   The MainComposition of the Comment Art to present.
 */
Akari.execute = function( mainComp )
{
  // Create a global reference so that the main composition could be accessed in Expressions
  Global._set( "__mainComp_akari", mainComp );
  
  // Present the main composition
  mainComp.present();
  
  // Set global value to indicate usage
  Global._set( "__isExecuted_akari", true );

  ////#IF (IST DEBUG)
  ////#IF (IST PERF_VISUAL)
  Akari.root.addChild( Akari.performanceGraph );
  ////#ENDIF
  Akari.root.addChild( Akari.performanceDisplay );
  ////#ENDIF
};

/* Function: stop
 * Stops the helper for debug use
 */
Akari.stop = function()
{
  if ( Akari.isExecuted() )
  {
    ( Global._get("__mainComp_akari") ).detach();
    Global._set( "__mainComp_akari", null );
    Global._set( "__isExecuted_akari", null );
    ////#IF (IST DEBUG)
    Akari.root.removeChild( Akari.performanceDisplay );
    ////#IF (IST PERF_VISUAL)
    Akari.root.removeChild( Akari.performanceGraph );
    ////#ENDIF
    ////#ENDIF
  }
};

/* Function: isExecuted
 * See if the helper is already running
 */
Akari.isExecuted = function()
{
  return ( Global._get("__isExecuted_akari") === true );
};

/* Property: root
 * A safe replacement for $.root in case it get banned
 */
Akari.root = function()
{
  if( $.hasOwnProperty("root") && $.root )
  {
    return $.root;
  }
  else
  {
    var sprite = $.createCanvas(
    {
      lifeTime : 810114514
    });

    ScriptManager.popEl( sprite );
    
    // remove 3D to make it clear by default
    sprite.transform.matrix3D = null;
    
    return sprite;
  }
}();

////#IF (IST DEBUG)

( function()
{
  var names = [];
  var colors = [];
  var stack = [];
  var finishTimes = [];
  var baseTime = getTimer();
  var offsetTime = 0;

  Akari.processID = {};

  Akari.performanceDisplay = function()
  {
    var perfMon = $.createComment( "", { lifeTime : 1, fontsize : 12, color : 0xFFFFFF } );
    ScriptManager.popEl( perfMon );
    perfMon.transform.matrix3D = null;
    return perfMon;
  }();

  ////#IF (IST PERF_VISUAL)
  Akari.performanceGraph = function()
  {
    var perfMon = $.createShape( { lifeTime : 1 } );
    ScriptManager.popEl( perfMon );
    perfMon.transform.matrix3D = null;
    return perfMon;
  }();
  ////#ENDIF

  Akari.updatePerformanceDisplay = function()
  {
    var offsetTime = getTimer() - baseTime;
    var remainTime = offsetTime;
    var processTime = 0;

    Akari.performanceDisplay.text = "";
    ////#IF (IST PERF_VISUAL)
    Akari.performanceGraph.graphics.clear();
    var graphPos = 0;
    ////#ENDIF
    for ( var i = 0; i < names.length; i ++ )
    {
      processTime = finishTimes[ 0 + i ];
      if ( processTime > 0 )
      {
        Akari.performanceDisplay.text += Math.floor( processTime * 100 / offsetTime ) + "% " + names[ 0 + i ] + " " + processTime + "\n";
        ////#IF (IST PERF_VISUAL)
        Akari.performanceGraph.graphics.beginFill( colors[ i ] );
        Akari.performanceGraph.graphics.drawRect( ( offsetTime - remainTime ) * $.width / offsetTime, 0, processTime * $.width / offsetTime, 8 );
        Akari.performanceGraph.graphics.endFill();
        ////#ENDIF
        remainTime -= processTime;
      }
    }

    if( remainTime > 0 )
    {
      Akari.performanceDisplay.text += Math.floor( remainTime * 100 / offsetTime ) + "% Unexplained " + remainTime;
      ////#IF (IST PERF_VISUAL)
      Akari.performanceGraph.graphics.beginFill( 0x303030 );
      Akari.performanceGraph.graphics.drawRect( ( offsetTime - remainTime ) * $.width / offsetTime, 0, remainTime * $.width / offsetTime, 8 );
      Akari.performanceGraph.graphics.endFill();
      ////#ENDIF
    }

    stack = [];
    finishTimes = [];
    baseTime = getTimer();
  };

  Akari.intoProcess = function( id )
  {
    stack.push( [ id, getTimer(), 0 ] );
    Global._set( "__stack_akari", stack.join( " | " ) );
  };

  Akari.outOfProcess = function()
  {
    var data = stack.pop();
    Global._set( "__stack_akari", stack.join( " | " ) );
    if ( data )
    {
      var delta = getTimer() - data[ 1 ] - data[ 2 ];
      if ( stack.length > 0 )
      {
        stack[ stack.length - 1 ][ 2 ] += delta + data[ 2 ];
      }
      finishTimes[ 0 + data[ 0 ] ] = finishTimes[ 0 + data[ 0 ] ] ? delta + finishTimes[ 0 + data[ 0 ] ] : delta;
    }
  };

  Akari.traceStack = function()
  {
    trace( Global._get( "__stack_akari" ) );
  };

  Akari.registerProcess = function( name, color )
  {
    var id = names.length;
    Akari.processID[ "" + name ] = id;
    names[ id ] = name;
    colors[ id ] = color;
  };

  Akari.registerProcess( "FLASH", 0xFFFFFF );
  Akari.registerProcess( "COMP", 0xFF0000 );
  Akari.registerProcess( "SORT", 0x00FF00 );
  Akari.registerProcess( "LAYER", 0x0000FF );
  Akari.registerProcess( "BINDER", 0xFFFF00 );
  Akari.registerProcess( "KEYFR", 0x00FFFF );
  Akari.registerProcess( "CURVE", 0xFF00FF );

  Akari.registerProcess( "USER", 0x808080 );

} )();

////#ENDIF