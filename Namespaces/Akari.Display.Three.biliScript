// {{Depend : Akari}} //
// {{Depend : Akari.Utilities}} //
// {{Depend : Akari.Display}} //

////#IF (NF INCL_THREE)

Akari.Display.Three = {};

/* Static Class: MatrixUtil
 * Utility functions for creating matrices.
 */
Akari.Display.Three.MatrixUtil =
{
  lookAt : function( eye, target )
  {
    var matT = $.createMatrix3D([]);
    var matR = $.createMatrix3D([]);

    matT.appendTranslation( -eye[ 0 ], -eye[ 1 ], -eye[ 2 ] );

    var dX = target[ 0 ] - eye[ 0 ];
    var dY = target[ 1 ] - eye[ 1 ];
    var dZ = target[ 2 ] - eye[ 2 ];
    if ( dX !== 0 )
    {
      var yAng = Akari.Utilities.Vector.angle( [ 0, 1 ], [ dX, dZ ] ) * 180 / Math.PI;
      matR.appendRotation( yAng * ( dX < 0 ? 1 : -1 ), $.createVector3D( 0, 1, 0 ) );
      if ( dY !== 0 )
      {
        var xRot = Math.asin( dY / Math.sqrt( dX * dX + dY * dY + dZ * dZ ) ) * 180 / Math.PI;
        matR.appendRotation( xRot, $.createVector3D( 1, 0, 0 ) );
      }
    }
    else if ( dY !== 0 )
    {
      var xAng = - Akari.Utilities.Vector.angle( [ 0, 1 ], [ dY, dZ ] ) * 180 / Math.PI;
      matR.appendRotation( xAng * ( dY < 0 ? 1 : -1 ), $.createVector3D( 1, 0, 0 ) );
    }

    return [ matT, matR ];
  }
};

/* Class: ThreeContainer
 * Utility class providing sorting.
 *
 * container
 *   [default] Akari.root
 *   Optional container sprite to base relative matrix on.
 */
Akari.Display.Three.ThreeContainer = function()
{
  var sortContainer = function( doc, cont, reg )
  {
    var identity = $.createMatrix3D(
      [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
      ]);
    var transform = doc.transform.getRelativeMatrix3D( cont ) || identity;
    var numChildren = doc.numChildren;

    var vLocal = $.toNumberVector( [] );
    var vWorld = $.toNumberVector( [] );
    var children = [];
    var childrenRef = [];

    for ( var i = 0; i < numChildren; i ++ )
    {
      var child = doc.getChildAt( i );
      var childTransform = child.transform.getRelativeMatrix3D( doc ) || identity;
      var relData = this.getRelatedData( child );
      var sortPoint = childTransform.transformVector( $.createVector3D( relData.sortOffsetX, relData.sortOffsetY, relData.sortOffsetZ ) );

      vLocal.push( sortPoint.x );
      vLocal.push( sortPoint.y );
      vLocal.push( sortPoint.z );

      // Using this later for sorting
      children[ i ] = i;
      childrenRef[ i ] = i;
    }

    transform.transformVectors( vLocal, vWorld );

    // Trick sorting children with closure
    children = children.sort( function( a, b )
    {
      return vWorld[ b * 3 + 2 ] - vWorld[ a * 3 + 2 ];
    });

    for ( var k = 0; k < numChildren; k ++ )
    {
      if ( children[ k ] !== childrenRef[ k ] )
      {
        doc.swapChildrenAt( childrenRef.indexOf( children[ k ] ), k );
        childrenRef[ childrenRef.indexOf( children[ k ] ) ] = childrenRef[ k ];
        childrenRef[ k ] = children[ k ];
      }
    }
  };

  return function( container )
  {
    var doc = Akari.Display.Sprite();
    var cont = container || Akari.root;

    // Plain object treat all DisplayObjects as the same key
    var childLookup = [];
    var relatedData = [];

    return {
      register : function( displayObject, params )
      {
        var obj = Akari.Utilities.Factory.extend(
        {
          sortOffsetX : 0,
          sortOffsetY : 0,
          sortOffsetZ : 0
        }, params );

        relatedData[ childLookup.length ] = obj;
        childLookup[ childLookup.length ] = displayObject;

        doc.addChild( displayObject );
      },
      getRelatedData : function( displayObject )
      {
        var index = childLookup.indexOf( displayObject );
        return relatedData[ index ];
      },
      setRelatedData : function( displayObject, value )
      {
        var index = childLookup.indexOf( displayObject );
        return ( relatedData[ index ] = value );
      },
      update : function()
      {
        sortContainer.apply( this, [ doc, cont, relatedData ] );
      },
      canvas : doc
    };
  };
}();

/* Class: Camera
 *
 * inPoint
 * outPoint
 * position
 *   [default] [ 0, 0, 0 ]
 * target
 *   [default] [ 0, 0, 0 ]
 * fov
 *   [default] 55
 */
Akari.Display.Three.Camera = function( params )
{
  var properties = Akari.Utilities.Factory.extend(
  {
    inPoint : 0,
    outPoint : 0,
    position : [ 0, 0, 0 ],
    target : [ 0, 0, 0 ],
    fov : 55
  }, params );
  var valueHolder = {};
  var binder = Akari.Utilities.Binder({ object : valueHolder, properties : properties, overridePathCheck : true });

  var proj = clone( Akari.root.transform.perspectiveProjection );

  return {
    inPoint : properties.inPoint,
    outPoint : properties.outPoint,

    update : function( time )
    {
      binder.update( time );
      var matrices = Akari.Display.Three.MatrixUtil.lookAt( valueHolder.position, valueHolder.target );
      this.matrixT = matrices[ 0 ];
      this.matrixR = matrices[ 1 ];

      proj.fieldOfView = valueHolder.fov;
      this.projection = proj;
    },

    clone : function()
    {
      return Akari.Display.Three.Camera( Akari.Utilities.Factory.clone( params ) );
    }
  };
};

/* Class: ThreeComposition < DynamicLayerSourceProvider
 * 
 * width
 *   [default] $.width
 *   A Number specifying viewport width.
 * height
 *   [default] $.height
 *   A Number specifying viewport height.
 * startTime
 *   [default] 0
 *   A Number, the time (in milliseconds) when the timeline starts.
 * duration
 *   [default] 60000
 *   A Number, the length (in milliseconds) of the timeline.
 * layers
 *   [default] []
 *   An Array of Layers, from top to bottom.
 * cameras
 *   [default] []
 *   An Array of Cameras.
 */
Akari.Display.Three.ThreeComposition = function( params )
{
  var canvas = Akari.Display.Sprite();

  // This will make all 2D stuff work on the resulting viewport: mask, filter, blendMode, etc.
  var layerWrap = Akari.Display.Sprite();
  var container = Akari.Display.Three.ThreeContainer( layerWrap );
  layerWrap.addChild( container.canvas );
  layerWrap.blendMode = "layer";
  canvas.addChild( layerWrap );

  var solidMask = Akari.Display.Solid({ width : params.width || $.width, height : params.height || $.height, color : 0x0 });
  canvas.addChild( solidMask );
  layerWrap.mask = solidMask;
  
  var layers = Akari.Utilities.Factory.collapse( params.layers || [] );
  var i = 0;
  
  for ( i = 0; i < layers.length; i ++ )
  {
    container.register( layers[ i ].source, layers[ i ].relatedData );
    layers[ i ].parent = this;
  }

  var cameras = params.cameras || [];
  var defaultCamera = Akari.Display.Three.Camera();

  var centerMatrix = $.createMatrix3D(
    [
      1, 0, 0, 0,
      0, 1, 0, 0,
      0, 0, 1, 0,
      0, 0, 0, 1
    ]);
  centerMatrix.appendTranslation( ( params.width || $.width ) / 2, ( params.height || $.height ) / 2, 0 );
  var centerPoint = $.createVector3D( ( params.width || $.width ) / 2, ( params.height || $.height ) / 2, 0 );
  
  return
  {
    width : params.width || $.width,
    height : params.height || $.height,
    startTime : params.startTime || 0,
    duration : params.duration || 60000,
    layers : layers,
    canvas : canvas,
    
    /* Function: update
     * Updates the canvas to fit the timeline.
     *
     * time
     *   A Number, the current time (in milliseconds) on the Composition's own timeline.
     */
    update : function( time )
    {
      // Check if Composition is active, otherwise update for borderline situations.
      if ( time < startTime )
        return this.update( startTime );
      if ( time >= startTime + duration )
        return this.update( startTime + duration - 1 );
      
      for ( var i = layers.length; i --; )
      {
        layers[ 0 + i ].update( time );
      }

      // Using linear search to assure overlapping rules work for cameras just as with layers
      var camera = defaultCamera;
      for ( var i = cameras.length - 1; i >= 0; i -- )
      {
        if ( cameras[ i + 0 ].inPoint <= time && time < cameras[ i + 0 ].outPoint )
        {
          camera = cameras[ i + 0 ];
          break;
        }
      }

      camera.update( time );
      var mat = camera.matrixT;
      var proj = camera.projection;

      var v = camera.matrixR.transformVector( centerPoint );
      var p = proj.projectionCenter;
      p.x = v.x;
      p.y = v.y;
      proj.projectionCenter = p;
      layerWrap.transform.perspectiveProjection = proj;

      mat.append( camera.matrixR );
      mat.append( centerMatrix );
      container.canvas.transform.matrix3D = mat;

      // sort
      container.update( time );
    },
    
    /* Function: clone
     */
    clone : function()
    {
      return Akari.Display.Three.ThreeComposition( Akari.Utilities.Factory.clone( params ) );
    }
  };
};

////#ENDIF